//
//  mjpeg423_decoder.c
//  mjpeg423app
//
//  Created by Rodolfo Pellizzoni on 12/24/13.
//  Copyright (c) 2013 __MyCompanyName__. All rights reserved.
//

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <float.h>
#include "../common/mjpeg423_types.h"
#include "mjpeg423_decoder.h"
#include "../common/util.h"

#include "xtime_l.h"
#include "ff.h"
#include "../ece423_vid_ctl/ece423_vid_ctl.h"

#define SEEK_FRAMES 120
#define MAX(i, j) (((i) > (j)) ? (i) : (j))
#define MIN(i, j) (((i) < (j)) ? (i) : (j))

// FatFs info
static FIL file_in;
static FRESULT f_status;
static uint32_t num_bytes_read;

//header and payload info
static uint32_t num_frames, w_size, h_size, num_iframes, payload_size;
static uint32_t Ysize, Cbsize, frame_size, frame_type;

//trailer structure
static iframe_trailer_t* trailer;

// frame index of currently playing video
static uint32_t frame_index = 0;

//main data structures. See lab manual for explanation
static int hCb_size, wCb_size, hYb_size, wYb_size;
static rgb_pixel_t* rgbblock;
static color_block_t* Yblock;
static color_block_t* Cbblock;
static color_block_t* Crblock;
static dct_block_t* YDCAC;
static dct_block_t* CbDCAC;
static dct_block_t* CrDCAC;
static uint8_t* Ybitstream;
static uint8_t* Cbbitstream;
static uint8_t* Crbitstream;

// performance metrics
static XTime now, past;
static long int underflow_count = 0;
performance_t sdReadTime, yTime, crTime, cbTime;
performance_m frameSize;
uint32_t yMemSum, crMemSum, cbMemSum, idctMemSum, rgbBlockMemSum;

double idctTime_sum = 0, ycbrToRgbTime_sum = 0, buffRegTime_sum = 0;

//main decoder function
void mjpeg423_decode(const char* filename_in)
{
    //file streams
    f_status = f_open(&file_in, filename_in, FA_READ);
    if(f_status != FR_OK) error_and_exit_error_code("cannot open input file", (uint32_t)f_status);

    //read header
    f_status = f_read(&file_in, (void*)&num_frames, sizeof(uint32_t), (UINT*)&num_bytes_read);
    if(f_status != FR_OK) error_and_exit_error_code("cannot read input file", (uint32_t)f_status);
    DEBUG_PRINT_ARG("Decoder start. Num frames #%lu\n", num_frames)

    f_status = f_read(&file_in, (void*)&w_size, sizeof(uint32_t), (UINT*)&num_bytes_read);
    if(f_status != FR_OK) error_and_exit_error_code("cannot read input file", (uint32_t)f_status);
    DEBUG_PRINT_ARG("Width %lu\n", w_size)

    f_status = f_read(&file_in, (void*)&h_size, sizeof(uint32_t), (UINT*)&num_bytes_read);
    if(f_status != FR_OK) error_and_exit_error_code("cannot read input file", (uint32_t)f_status);
    DEBUG_PRINT_ARG("Height %lu\n", h_size)

    f_status = f_read(&file_in, (void*)&num_iframes, sizeof(uint32_t), (UINT*)&num_bytes_read);
    if(f_status != FR_OK) error_and_exit_error_code("cannot read input file", (uint32_t)f_status);
    DEBUG_PRINT_ARG("Num i frames %lu\n", num_iframes)

    f_status = f_read(&file_in, (void*)&payload_size, sizeof(uint32_t), (UINT*)&num_bytes_read);
    if(f_status != FR_OK) error_and_exit_error_code("cannot read input file", (uint32_t)f_status);
    DEBUG_PRINT_ARG("Payload Size %lu\n", payload_size)

    hCb_size = h_size/8;           //number of chrominance blocks
    wCb_size = w_size/8;
    hYb_size = h_size/8;           //number of luminance blocks. Same as chrominance in the sample app
    wYb_size = w_size/8;

    //trailer structure
    trailer = malloc(sizeof(iframe_trailer_t)*num_iframes);

    //main data structures. See lab manual for explanation
    if((rgbblock = malloc(w_size*h_size*sizeof(rgb_pixel_t)))==NULL) error_and_exit("cannot allocate rgbblock");
    if((Yblock = malloc(hYb_size * wYb_size * 64))==NULL) error_and_exit("cannot allocate Yblock");
    if((Cbblock = malloc(hCb_size * wCb_size * 64))==NULL) error_and_exit("cannot allocate Cbblock");
    if((Crblock = malloc(hCb_size * wCb_size * 64))==NULL) error_and_exit("cannot allocate Crblock");;
    if((YDCAC = malloc(hYb_size * wYb_size * 64 * sizeof(DCTELEM)))==NULL) error_and_exit("cannot allocate YDCAC");
    if((CbDCAC = malloc(hCb_size * wCb_size * 64 * sizeof(DCTELEM)))==NULL) error_and_exit("cannot allocate CbDCAC");
    if((CrDCAC = malloc(hCb_size * wCb_size * 64 * sizeof(DCTELEM)))==NULL) error_and_exit("cannot allocate CrDCAC");
    //Ybitstream is assigned a size sufficient to hold all bistreams
    //the bitstream is then read from the file into Ybitstream
    //the remaining pointers simply point to the beginning of the Cb and Cr streams within Ybitstream
    if((Ybitstream = malloc(hYb_size * wYb_size * 64 * sizeof(DCTELEM) + 2 * hCb_size * wCb_size * 64 * sizeof(DCTELEM)))==NULL) error_and_exit("cannot allocate bitstream");

    //read trailer: set file to beginning of trailer
    f_status = f_lseek(&file_in, 5 * sizeof(uint32_t) + payload_size);
    if(f_status != FR_OK) error_and_exit_error_code("cannot seek into file", (uint32_t)f_status);
    for(int count = 0; count < num_iframes; count++){
        f_status = f_read(&file_in, (void*)&(trailer[count].frame_index), sizeof(uint32_t), (UINT*)&num_bytes_read);
        if(f_status != FR_OK) error_and_exit_error_code("cannot read input file", (uint32_t)f_status);
        DEBUG_PRINT_ARG("I frame index %lu, ", trailer[count].frame_index)
        f_status = f_read(&file_in, (void*)&(trailer[count].frame_position), sizeof(uint32_t), (UINT*)&num_bytes_read);
        if(f_status != FR_OK) error_and_exit_error_code("cannot read input file", (uint32_t)f_status);
        DEBUG_PRINT_ARG("position %lu\n", trailer[count].frame_position)
    }
    //read trailer: set it back to beginning of payload
    f_status = f_lseek(&file_in, 5 * sizeof(uint32_t));
    if(f_status != FR_OK) error_and_exit_error_code("cannot seek into file. error code: %d", (uint32_t)f_status);

    //read and decode frames
    for(int frame_index = 0; frame_index < num_frames; frame_index++){
        DEBUG_PRINT_ARG("\nFrame #%d\n",frame_index)

		rgbblock = buff_next();

        //read frame payload
		f_status = f_read(&file_in, (void*)&frame_size, sizeof(uint32_t), (UINT*)&num_bytes_read);
		if(f_status != FR_OK) error_and_exit_error_code("cannot read input file", (uint32_t)f_status);
        DEBUG_PRINT_ARG("Frame_size %lu\n",frame_size)

		f_status = f_read(&file_in, (void*)&frame_type, sizeof(uint32_t), (UINT*)&num_bytes_read);
		if(f_status != FR_OK) error_and_exit_error_code("cannot read input file", (uint32_t)f_status);
        DEBUG_PRINT_ARG("Frame_type %lu\n",frame_type)

		f_status = f_read(&file_in, (void*)&Ysize, sizeof(uint32_t), (UINT*)&num_bytes_read);
		if(f_status != FR_OK) error_and_exit_error_code("cannot read input file", (uint32_t)f_status);
		f_status = f_read(&file_in, (void*)&Cbsize, sizeof(uint32_t), (UINT*)&num_bytes_read);
		if(f_status != FR_OK) error_and_exit_error_code("cannot read input file", (uint32_t)f_status);
		f_status = f_read(&file_in, (void*)Ybitstream, frame_size - 4 * sizeof(uint32_t), (UINT*)&num_bytes_read);
		if(f_status != FR_OK) error_and_exit_error_code("cannot read input file", (uint32_t)f_status);

        //set the Cb and Cr bitstreams to point to the right location
        Cbbitstream = Ybitstream + Ysize;
        Crbitstream = Cbbitstream + Cbsize;

        //lossless decoding
        lossless_decode(hYb_size*wYb_size, Ybitstream, YDCAC, Yquant, frame_type);
        lossless_decode(hCb_size*wCb_size, Cbbitstream, CbDCAC, Cquant, frame_type);
        lossless_decode(hCb_size*wCb_size, Crbitstream, CrDCAC, Cquant, frame_type);

        //fdct
        for(int b = 0; b < hYb_size*wYb_size; b++) idct(YDCAC[b], Yblock[b]);
        for(int b = 0; b < hCb_size*wCb_size; b++) idct(CbDCAC[b], Cbblock[b]);
        for(int b = 0; b < hCb_size*wCb_size; b++) idct(CrDCAC[b], Crblock[b]);

        //ybcbr to rgb conversion
        for(int b = 0; b < hCb_size*wCb_size; b++)
        {
            ycbcr_to_rgb(b/wCb_size*8, b%wCb_size*8, w_size, Yblock[b], Cbblock[b], Crblock[b], rgbblock);
        }

        buff_reg();
        vdma_out();
    } //end frame iteration

    DEBUG_PRINT("\nDecoder done.\n\n\n")

    //close down
    f_close(&file_in);
    free(rgbblock);
    free(Yblock);
    free(Cbblock);
    free(Crblock);
    free(YDCAC);
    free(CbDCAC);
    free(CrDCAC);
    free(Ybitstream);
}

// Assumes that f_mount is already called.
void load_video(const char* filename_in) //HM
{
    printf("Decoding %s to VDMA\n", filename_in);

    //file streams
    f_status = f_open(&file_in, filename_in, FA_READ);
    if(f_status != FR_OK) error_and_exit_error_code("cannot open input file", (uint32_t)f_status);

    //read header
    f_status = f_read(&file_in, (void*)&num_frames, sizeof(uint32_t), (UINT*)&num_bytes_read);
    if(f_status != FR_OK) error_and_exit_error_code("cannot read input file", (uint32_t)f_status);
    DEBUG_PRINT_ARG("Decoder start. Num frames #%lu\n", num_frames)

    f_status = f_read(&file_in, (void*)&w_size, sizeof(uint32_t), (UINT*)&num_bytes_read);
    if(f_status != FR_OK) error_and_exit_error_code("cannot read input file", (uint32_t)f_status);
    DEBUG_PRINT_ARG("Width %lu\n", w_size)

    f_status = f_read(&file_in, (void*)&h_size, sizeof(uint32_t), (UINT*)&num_bytes_read);
    if(f_status != FR_OK) error_and_exit_error_code("cannot read input file", (uint32_t)f_status);
    DEBUG_PRINT_ARG("Height %lu\n", h_size)

    f_status = f_read(&file_in, (void*)&num_iframes, sizeof(uint32_t), (UINT*)&num_bytes_read);
    if(f_status != FR_OK) error_and_exit_error_code("cannot read input file", (uint32_t)f_status);
    DEBUG_PRINT_ARG("Num i frames %lu\n", num_iframes)

    f_status = f_read(&file_in, (void*)&payload_size, sizeof(uint32_t), (UINT*)&num_bytes_read);
    if(f_status != FR_OK) error_and_exit_error_code("cannot read input file", (uint32_t)f_status);
    DEBUG_PRINT_ARG("Payload Size %lu\n", payload_size)

    hCb_size = h_size/8;           //number of chrominance blocks
    wCb_size = w_size/8;
    hYb_size = h_size/8;           //number of luminance blocks. Same as chrominance in the sample app
    wYb_size = w_size/8;

    //trailer structure
    trailer = malloc(sizeof(iframe_trailer_t)*num_iframes);

    //main data structures. See lab manual for explanation
    if((rgbblock = malloc(w_size*h_size*sizeof(rgb_pixel_t)))==NULL) error_and_exit("cannot allocate rgbblock");
    if((Yblock = malloc(hYb_size * wYb_size * 64))==NULL) error_and_exit("cannot allocate Yblock");
    if((Cbblock = malloc(hCb_size * wCb_size * 64))==NULL) error_and_exit("cannot allocate Cbblock");
    if((Crblock = malloc(hCb_size * wCb_size * 64))==NULL) error_and_exit("cannot allocate Crblock");;
    if((YDCAC = malloc(hYb_size * wYb_size * 64 * sizeof(DCTELEM)))==NULL) error_and_exit("cannot allocate YDCAC");
    if((CbDCAC = malloc(hCb_size * wCb_size * 64 * sizeof(DCTELEM)))==NULL) error_and_exit("cannot allocate CbDCAC");
    if((CrDCAC = malloc(hCb_size * wCb_size * 64 * sizeof(DCTELEM)))==NULL) error_and_exit("cannot allocate CrDCAC");

    //Get memory sizes for file
	yMemSum = hYb_size * wYb_size * 64 * sizeof(DCTELEM); //YDCAC
	cbMemSum = hCb_size * wCb_size * 64 * sizeof(DCTELEM); //CbDCAC
	crMemSum = hCb_size * wCb_size * 64 * sizeof(DCTELEM); //CrDCAC
    idctMemSum = hCb_size * wCb_size * 64; //Yblock
    rgbBlockMemSum = w_size*h_size*sizeof(rgb_pixel_t); //RGBBlock

	DEBUG_PRINT_ARG("---- Y Mem Size ---- %lu \n",  yMemSum)
	DEBUG_PRINT_ARG("---- Cb Mem Size ---- %lu \n", cbMemSum)
	DEBUG_PRINT_ARG("---- Cr Mem Size ---- %lu \n", crMemSum)
	DEBUG_PRINT_ARG("---- IDCT Mem Size ---- %lu \n", idctMemSum)
	DEBUG_PRINT_ARG("---- RBG Mem Size ---- %lu \n", rgbBlockMemSum)

    //Ybitstream is assigned a size sufficient to hold all bistreams
    //the bitstream is then read from the file into Ybitstream
    //the remaining pointers simply point to the beginning of the Cb and Cr streams within Ybitstream
    if((Ybitstream = malloc(hYb_size * wYb_size * 64 * sizeof(DCTELEM) + 2 * hCb_size * wCb_size * 64 * sizeof(DCTELEM)))==NULL) error_and_exit("cannot allocate bitstream");

    //read trailer: set file to beginning of trailer
    f_status = f_lseek(&file_in, 5 * sizeof(uint32_t) + payload_size);
    if(f_status != FR_OK) error_and_exit_error_code("cannot seek into file", (uint32_t)f_status);
    for(int count = 0; count < num_iframes; count++){
        f_status = f_read(&file_in, (void*)&(trailer[count].frame_index), sizeof(uint32_t), (UINT*)&num_bytes_read);
        if(f_status != FR_OK) error_and_exit_error_code("cannot read input file", (uint32_t)f_status);
        DEBUG_PRINT_ARG("I frame index %lu, ", trailer[count].frame_index)
        f_status = f_read(&file_in, (void*)&(trailer[count].frame_position), sizeof(uint32_t), (UINT*)&num_bytes_read);
        if(f_status != FR_OK) error_and_exit_error_code("cannot read input file", (uint32_t)f_status);
        DEBUG_PRINT_ARG("position %lu\n", trailer[count].frame_position)
    }
    //read trailer: set it back to beginning of payload
    f_status = f_lseek(&file_in, 5 * sizeof(uint32_t));
    if(f_status != FR_OK) error_and_exit_error_code("cannot seek into file. error code: %d", (uint32_t)f_status);
}

double calc_time_offset()
{
	XTime_GetTime(&past);
	XTime_GetTime(&now);
	double timeOffset = ((double)now-(double)past)/325.0;
//    DEBUG_PRINT_ARG("XTime_GetTime performance: %lf us\n", timeOffset)
	return timeOffset;
}

void benchmark(performance_t* perf, double timeOffset)
{
	double time_us = ((double)now - (double)past)/325.0 - timeOffset;
	perf->max_us[frame_type] = MAX(perf->max_us[frame_type], time_us);
	perf->min_us[frame_type] = MIN(perf->min_us[frame_type], time_us);
	perf->sum_us[frame_type] += time_us;
}

uint8_t decode_single_frame() //HM
{
	rgbblock = buff_next();
	if (rgbblock == NULL) return 1; // overflowing buffer
	if (frame_index >= num_frames) return 1; // reached end of video
    //DEBUG_PRINT_ARG("Frame_index %d\n",frame_index)
	double timeOffset = calc_time_offset();
	double time_us = 0;

    //read frame payload
	XTime_GetTime(&past);
	f_status = f_read(&file_in, (void*)&frame_size, sizeof(uint32_t), (UINT*)&num_bytes_read);
//	if(f_status != FR_OK) error_and_exit_error_code("cannot read input file", (uint32_t)f_status);
//    DEBUG_PRINT_ARG("Frame_size %lu\n",frame_size)

	f_status = f_read(&file_in, (void*)&frame_type, sizeof(uint32_t), (UINT*)&num_bytes_read);
//	if(f_status != FR_OK) error_and_exit_error_code("cannot read input file", (uint32_t)f_status);
//    DEBUG_PRINT_ARG("Frame_type %lu\n",frame_type)

	f_status = f_read(&file_in, (void*)&Ysize, sizeof(uint32_t), (UINT*)&num_bytes_read);
//	if(f_status != FR_OK) error_and_exit_error_code("cannot read input file", (uint32_t)f_status);
	f_status = f_read(&file_in, (void*)&Cbsize, sizeof(uint32_t), (UINT*)&num_bytes_read);
//	if(f_status != FR_OK) error_and_exit_error_code("cannot read input file", (uint32_t)f_status);
	f_status = f_read(&file_in, (void*)Ybitstream, frame_size - 4 * sizeof(uint32_t), (UINT*)&num_bytes_read);
//	if(f_status != FR_OK) error_and_exit_error_code("cannot read input file", (uint32_t)f_status);
	XTime_GetTime(&now);
	benchmark(&sdReadTime, timeOffset);

    //set the Cb and Cr bitstreams to point to the right location
    Cbbitstream = Ybitstream + Ysize;
    Crbitstream = Cbbitstream + Cbsize;

    //lossless decoding

	XTime_GetTime(&past);
    lossless_decode(hYb_size*wYb_size, Ybitstream, YDCAC, Yquant, frame_type);
	XTime_GetTime(&now);
	benchmark(&yTime, timeOffset);

	XTime_GetTime(&past);
    lossless_decode(hCb_size*wCb_size, Cbbitstream, CbDCAC, Cquant, frame_type);
	XTime_GetTime(&now);
	benchmark(&cbTime, timeOffset);

	XTime_GetTime(&past);
    lossless_decode(hCb_size*wCb_size, Crbitstream, CrDCAC, Cquant, frame_type);
	XTime_GetTime(&now);
	benchmark(&crTime, timeOffset);

    //fdct
	XTime_GetTime(&past);
    for(int b = 0; b < hYb_size*wYb_size; b++) idct(YDCAC[b], Yblock[b]);
	XTime_GetTime(&now);
	idctTime_sum += ((double)now - (double)past)/325.0 - timeOffset;
//    DEBUG_PRINT_ARG("IDCT: %lf us\n", ((double)now - (double)past)/325.0 - timeOffset)
    for(int b = 0; b < hCb_size*wCb_size; b++) idct(CbDCAC[b], Cbblock[b]);
    for(int b = 0; b < hCb_size*wCb_size; b++) idct(CrDCAC[b], Crblock[b]);

    //ybcbr to rgb conversion
	XTime_GetTime(&past);
    for(int b = 0; b < hCb_size*wCb_size; b++)
    {
        ycbcr_to_rgb(b/wCb_size*8, b%wCb_size*8, w_size, Yblock[b], Cbblock[b], Crblock[b], rgbblock);
    }
	XTime_GetTime(&now);
	ycbrToRgbTime_sum += ((double)now - (double)past)/325.0 - timeOffset;
//    DEBUG_PRINT_ARG("ycbrToRgb: %lf us\n", ((double)now - (double)past)/325.0 - timeOffset)

	// Record memory stats
	frameSize.max[frame_type] = MAX(frameSize.max[frame_type], frame_size);
	frameSize.min[frame_type] = MIN(frameSize.min[frame_type], frame_size);
	frameSize.sum[frame_type] += frame_size;


	XTime_GetTime(&past);
    buff_reg();
	XTime_GetTime(&now);
	buffRegTime_sum += ((double)now - (double)past)/325.0 - timeOffset;
//    DEBUG_PRINT_ARG("buffReg: %lf us\n", ((double)now - (double)past)/325.0 - timeOffset)

    // Increment frame_index
    frame_index++;
    return 0;
}

void print_benchmark(performance_t* perf, char* name)
{
	printf("---- %s ----\n", name);
    DEBUG_PRINT_ARG(" Min (i): %lf us\n", perf->min_us[0])
	DEBUG_PRINT_ARG(" Max (i): %lf us\n", perf->max_us[0])
    DEBUG_PRINT_ARG(" Ave (i): %lf us\n", perf->sum_us[0]/num_iframes)
    DEBUG_PRINT_ARG(" Min (p): %lf us\n", perf->min_us[1])
	DEBUG_PRINT_ARG(" Max (p): %lf us\n", perf->max_us[1])
    DEBUG_PRINT_ARG(" Ave (p): %lf us\n", perf->sum_us[1]/(num_frames-num_iframes))
}

void mjpeg423_decode_to_vdma_print_stats()
{
	print_benchmark(&sdReadTime, "SD READ");
	print_benchmark(&yTime, "LOSSLESS Y");
	print_benchmark(&cbTime, "LOSSLESS CB");
	print_benchmark(&crTime, "LOSSLESS CR");
    DEBUG_PRINT_ARG("---- IDCT ----\n Ave: %lf us\n", idctTime_sum/(num_frames))
    DEBUG_PRINT_ARG("---- YCBR TO RGB ----\n Ave: %lf us\n", ycbrToRgbTime_sum/(num_frames))
    DEBUG_PRINT_ARG("---- BUFF REG ----\n Ave: %lf us\n", buffRegTime_sum/(num_frames))

	printf("---- SD Card frame size ----\n");
    DEBUG_PRINT_ARG(" Min (i): %lf \n", (double) frameSize.min[0])
	DEBUG_PRINT_ARG(" Max (i): %lf \n", (double) frameSize.max[0])
    DEBUG_PRINT_ARG(" Ave (i): %lf \n", (double) frameSize.sum[0]/num_iframes)
	DEBUG_PRINT_ARG(" Min (p): %lf \n", (double) frameSize.min[1])
	DEBUG_PRINT_ARG(" Max (p): %lf \n", (double) frameSize.max[1])
	DEBUG_PRINT_ARG(" Ave (p): %lf \n", (double) frameSize.sum[1]/(num_frames-num_iframes))

	DEBUG_PRINT_ARG("---- Y Mem Size ---- %lu \n",  yMemSum)
	DEBUG_PRINT_ARG("---- Cb Mem Size ---- %lu \n", cbMemSum)
	DEBUG_PRINT_ARG("---- Cr Mem Size ---- %lu \n", crMemSum)
	DEBUG_PRINT_ARG("---- IDCT Mem Size ---- %lu \n", idctMemSum)
	DEBUG_PRINT_ARG("---- RBG Mem Size ---- %lu \n", rgbBlockMemSum)
	DEBUG_PRINT_ARG("---- Underflow Events ---- %ld \n", underflow_count)
	DEBUG_PRINT_ARG("---- Average FPS ---- %lf \n", (double)TIMER_FPS*num_frames/(num_frames + underflow_count))
	//FPS = TIMER_FPS*(num_frames/(num_frames+underflow_count)) OR
	//FPS = num_frames/((num_frames + underflow_count)*period)

}

uint8_t is_last_frame()
{
	return frame_index >= num_frames;
}

void mjpeg423_decode_to_vdma_free_current_file()
{
	//close down
	f_close(&file_in);
	free(trailer);
	free(rgbblock);
	free(Yblock);
	free(Cbblock);
	free(Crblock);
	free(YDCAC);
	free(CbDCAC);
	free(CrDCAC);
	free(Ybitstream);
	frame_index = 0;
	underflow_count = 0;
	memset(&sdReadTime, 0, sizeof(performance_t));
	memset(&yTime, 0, sizeof(performance_t));
	memset(&crTime, 0, sizeof(performance_t));
	memset(&cbTime, 0, sizeof(performance_t));

	memset(sdReadTime.min_us, DBL_MAX, 2*sizeof(double));
	memset(yTime.min_us, DBL_MAX, 2*sizeof(double));
	memset(crTime.min_us, DBL_MAX, 2*sizeof(double));
	memset(cbTime.min_us, DBL_MAX, 2*sizeof(double));

	idctTime_sum = 0;
	ycbrToRgbTime_sum = 0;
	buffRegTime_sum = 0;

	memset(&frameSize, 0, sizeof(performance_m));
	memset(frameSize.min, DBL_MAX, 2*sizeof(double));
	yMemSum = 0;
	cbMemSum = 0;
	crMemSum = 0;
    idctMemSum = 0;
    rgbBlockMemSum = 0;;

	printf("Freed memory for file\n");
}

uint8_t forward_button() //returns 1 if valid i_frame found, 0 if not
{
	for (int count = 0; count < num_iframes; count++)
	{
		if (((int)trailer[count].frame_index - (int)frame_index) >= SEEK_FRAMES)
		{
		    //set file to location of I frame
			printf("Current frame %d, seeking to %d\n",frame_index,trailer[count].frame_index);
		    f_status = f_lseek(&file_in, trailer[count].frame_position);
		    if(f_status != FR_OK) error_and_exit_error_code("cannot seek into file", (uint32_t)f_status);
		    frame_index = trailer[count].frame_index;
		    return 1;
		}
	}

	return 0;
}

uint8_t backward_button()
{
	for (int count = num_iframes-1; count >= 0; count--)
	{
		if (((int)frame_index - (int)trailer[count].frame_index) >= SEEK_FRAMES)
		{
		    //set file to location of I frame
			printf("Current frame %d, seeking to %d\n",frame_index,trailer[count].frame_index);
		    f_status = f_lseek(&file_in, trailer[count].frame_position);
		    if(f_status != FR_OK) error_and_exit_error_code("cannot seek into file", (uint32_t)f_status);
		    frame_index = trailer[count].frame_index;
		    return 1;
		}
	}

	return 0;
}

void reset_video() //sets the video back to first frame
{
    f_status = f_lseek(&file_in, 5 * sizeof(uint32_t));
    if(f_status != FR_OK) error_and_exit_error_code("cannot seek into file. error code: %d", (uint32_t)f_status);
    frame_index = 0;
	return;
}

void set_underflow_count()
{
	underflow_count++;
}




