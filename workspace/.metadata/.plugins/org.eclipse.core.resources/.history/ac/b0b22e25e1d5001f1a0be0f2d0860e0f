#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "../common/mjpeg423_types.h"
#include "../decoder/mjpeg423_decoder.h"
#include "../common/util.h"
#include "ff.h"
#include "../ece423_vid_ctl/ece423_vid_ctl.h"
#include "video_control.h"

//extern FATFS fatfs;
//extern FIL fil;

// Function that loads every time we load in a new video
// Returns a video information struct which contains all the metadata (header and trailer) of the video
// that a decode function would need to decode each frame

// The metadata is freed when we cycle the video

video_info_t load_video(TCHAR* file_name)
{
	video_info_t video_info;
	printf("About to load video %s \n", file_name);

    //open file
	FRESULT status = f_open(&fil, file_name, FA_READ);
	if(status != FR_OK) error_and_exit("COULDN'T LOAD VIDEO");
    uint32_t num_bytes_read;

    //read header
    if(f_read(&fil, &video_info.num_frames, sizeof(uint32_t), &num_bytes_read) != 0) error_and_exit("FAILED TO READ NUMBER OF FRAMES");
    if(f_read(&fil, &video_info.w_size, sizeof(uint32_t), &num_bytes_read) != 0) error_and_exit("FAILED TO READ WIDTH");
    if(f_read(&fil, &video_info.h_size, sizeof(uint32_t), &num_bytes_read) != 0) error_and_exit("FAILED TO READ HEIGHT");
    if(f_read(&fil, &video_info.num_iframes, sizeof(uint32_t), &num_bytes_read) != 0) error_and_exit("FAILED TO READ NUM I-FRAMES");
    if(f_read(&fil, &video_info.payload_size, sizeof(uint32_t), &num_bytes_read) != 0) error_and_exit("FAILED TO READ PAYLOAD SIZE");

    //read trailer
    video_info.hCb_size = video_info.h_size/8;           //number of chrominance blocks
    video_info.wCb_size = video_info.w_size/8;
    video_info.hYb_size = video_info.h_size/8;           //number of luminance blocks. Same as chrominance in the sample app
    video_info.wYb_size = video_info.w_size/8;

    //trailer structure
    video_info.trailer = malloc(sizeof(iframe_trailer_t)*video_info.num_iframes);

    //main data structures. See lab manual for explanation
    //gb_pixel_t* rgbblock;
    // rgbblock = buff_next(); this is probably wrong
    //if((rgbblock = malloc(w_size*h_size*sizeof(rgb_pixel_t)))==NULL) error_and_exit("cannot allocate rgbblock");
    //color_block_t* Yblock;
    if((video_info.Yblock = malloc(video_info.hYb_size * video_info.wYb_size * 64))==NULL) error_and_exit("cannot allocate Yblock");
    if((video_info.Cbblock = malloc(video_info.hCb_size * video_info.wCb_size * 64))==NULL) error_and_exit("cannot allocate Cbblock");
    if((video_info.Crblock = malloc(video_info.hCb_size * video_info.wCb_size * 64))==NULL) error_and_exit("cannot allocate Crblock");;
    if((video_info.YDCAC = malloc(video_info.hYb_size * video_info.wYb_size * 64 * sizeof(DCTELEM)))==NULL) error_and_exit("cannot allocate YDCAC");
    if((video_info.CbDCAC = malloc(video_info.hCb_size * video_info.wCb_size * 64 * sizeof(DCTELEM)))==NULL) error_and_exit("cannot allocate CbDCAC");
    if((video_info.CrDCAC = malloc(video_info.hCb_size * video_info.wCb_size * 64 * sizeof(DCTELEM)))==NULL) error_and_exit("cannot allocate CrDCAC");
    //Ybitstream is assigned a size sufficient to hold all bistreams
    //the bitstream is then read from the file into Ybitstream
    //the remaining pointers simply point to the beginning of the Cb and Cr streams within Ybitstream

    if((video_info.Ybitstream = malloc(video_info.hYb_size * video_info.wYb_size * 64 * sizeof(DCTELEM) + 2 * video_info.hCb_size * video_info.wCb_size * 64 * sizeof(DCTELEM)))==NULL) error_and_exit("cannot allocate bitstream");

    //read trailer. Note: the trailer information is not used in the sample decoder app
    //set file to beginning of trailer
    //if(fseek(file_in, 5 * sizeof(uint32_t) + payload_size, SEEK_SET) != 0) error_and_exit("cannot seek into file");
    if(f_lseek(&fil, 5 * sizeof(uint32_t) + video_info.payload_size) != 0) error_and_exit("ERROR GETTING TO TRAILER");
    for(int count = 0; count < video_info.num_iframes; count++){
    	if(f_read(&fil, &(video_info.trailer[count].frame_index), sizeof(uint32_t), &num_bytes_read) != 0) error_and_exit("FAILED TO GET FRAME INDEX");
    	if(f_read(&fil, &(video_info.trailer[count].frame_position), sizeof(uint32_t), &num_bytes_read) != 0) error_and_exit ("FAILED TO GET FRAME POSITION");
    }
    //set it back to beginning of payload
    if(f_lseek(&fil, 5 * sizeof(uint32_t)) != 0) error_and_exit("COULD NOT SEEK BACK TO BEGINNING");
    // return the metadata of the video
    return video_info;
}

void display_next_frame(uint32_t* frame_index, video_info_t video_info){
	// basically just runs decoder
	mjpeg423_decode(*frame_index, video_info);
	++(*frame_index);
    // increments the frame index (assuming that it will run normally and not have a slip forwards/back)
}

void pause_button(BOOL* paused_ptr){
	// when pressed, this should suspend the
	printf("Pause button pressed!\n");
	*paused_ptr = !(*paused_ptr);
}

void cycle_button(uint32_t* frame_index, video_info_t* prev_video_info){
	//delete all the malloced data
//	free(prev_video_info->Yblock);
//	free(prev_video_info->Cbblock);
//	free(prev_video_info->Crblock);
//	free(prev_video_info->YDCAC);
//	free(prev_video_info->CbDCAC);
//	free(prev_video_info->CrDCAC);
//	free(prev_video_info->Ybitstream);
//	free(prev_video_info->trailer);

	//find the next video and load it in
	TCHAR* next_video = find_next_video();
	printf("Next video: %s", next_video);
	*prev_video_info = load_video(next_video);

	//reset the frame index and load in the first frame
	*frame_index = 0;
}

void forward_button(){

}

void backward_button(){

}

BOOL valid_video_name(char* filename){
//	printf("%s\n", filename);
//	printf("%c\n",filename[0]);
//	printf("%c\n",*filename);
//	if((char)filename[0] == "V"){
//		printf("1\n");
//	}
//	if((char)*filename == "V"){
//		printf("2\n");
//	}
//	int length = strlen(filename);
//	printf("%s\n", (char*)filename[0]);
//	if(((char*)filename[0] == "V")){
//		if((strstr(&filename, ".MPG") != NULL))
//			return TRUE;
//	}
	if((strstr(filename,"V1")==filename) && (strstr(filename, ".MPG") != NULL))
	{
		return TRUE;
	}
//	if((strstr(filename, ".MPG") != NULL))
//		return TRUE;
	return FALSE;
}

TCHAR* find_next_video(){
	DIR directory;	// directory object for opening the SD card
	FILINFO fno;
	FRESULT status = f_opendir(&directory, "3:/");
	if(status == FR_OK){
		for(;;){
			// read the first item in the directory
			status = f_readdir(&directory, &fno);
			printf("%s\n", fno.fname);
			// if we are at the end of the directory
			if(fno.fname == NULL){
				f_rewinddir(&directory);
			}
			// if it meets the qualifications to be a video, return the fno.fname
			else if(valid_video_name(fno.fname)){
				TCHAR* next_video = fno.fname;
				printf("%s/n", *next_video);
				return next_video;
			}
		}
	}


}
