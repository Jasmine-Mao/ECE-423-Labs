/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "decoder/mjpeg423_decoder.h"
#include "ff.h"
#include "ece423_vid_ctl/ece423_vid_ctl.h"
#include "xparameters.h"
#include "xil_types.h"
#include "timer_gpio.h"

#define TIMER_1S 325000000
#define TIMER_FPS 1

volatile int8_t val_0;
volatile int8_t val_1;


//static FATFS fatfs;
//static FIL fil;



int main()
{
    init_platform();

    //vdma_init(1280, 720, 2);// initialize display & allocate buffer memory (num buffs last parameter)
    //rgb_pixel_t* rgbblock;

    //rgbblock = buff_next(); //get next buffer to put data into
    //buff_reg(); //mark buffer ready to be displayed
    //vdma_out(); //display buffer
    //vdma_close(); //free the frame buffer memory

//    FRESULT status;
//    printf("STARTING\n");
//
//    status = f_mount(&fatfs, "3:/", 1);
//    printf("Mount STATUS : %d\n", status);

    //open file
    //


    //mjpeg423_decode("3:/v1_1730.mpg"); //fix later
    //mjpeg423_decode();
    while(1);





//    status = f_open(&fil, "3:/v1_1730.mpg", FA_READ);
//    printf("open STATUS : %d\n", status);
//
//    uint32_t num_frames = 0;
//    uint32_t NumBytesRead = 0;
//    f_read(&fil, (void*)&num_frames, sizeof(uint32_t), (UINT *)&NumBytesRead);
    //f_read(&fil, (void*)&num_frames, 10, (UINT *)&NumBytesRead);

    //printf("Testing frames %d & bytes read %d\n",num_frames, NumBytesRead);
    print("Hello World\n\r");
    print("Successfully ran Hello World application");
    cleanup_platform();
    return 0;
}
